openapi: '3.0.0'
info:
  title: Ecommerce Store API - learnCodeWithSaddam
  description: Free Open source REST API
  version: 1.0.1
  contact:
    name: Saddam Arbaa
    email: 'saddamarbaas@gmail.com'
    url: 'https://www.linkedin.com/in/saddamarbaa/'
  license:
    name: 'Apache 2.0'
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'

servers:
  - url: '{serverUrl}/api/{apiVersion}'
    variables:
      apiVersion:
        default: v1
        enum:
          - v1
          - v2
          - v3
      serverUrl:
        description: Environment -  Production, Staging, Test or Dev
        default: http://localhost:8000
        enum:
          - https://saddam-rest-api.herokuapp.com
          - https://saddam-rest-api.herokuapp.com
          - https://saddam-rest-api.herokuapp.com
          - http://localhost:8000

paths:
  # Health Check

  /:
    get:
      summary: Api health check endpoint
      tags:
        - HealthCheck
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/HealthCheckResponse'

  # Health Check

  /healthChecker:
    get:
      summary: Api health check endpoint
      tags:
        - HealthCheck
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/HealthCheckResponse'

  # Products

  /products:
    get:
      summary: Returns a list of products (can search, sort by each filed, filter by each filed)
      tags:
        - Product
      description:
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            example: 10
          description: The numbers of items to return (the default value is 20)
        - in: query
          name: page
          schema:
            type: integer
            # minimum: 1
            # example: 1
          description: Pagination page number (the default value is 1)
        - in: query
          name: sort
          schema:
            type: string
            example: 'price,-ratings'
          description: Sort query (the default is sort by lowest price and highest rating
        - in: query
          name: category
          schema:
            type: string
            example:
          description: Filter by Category name (Example - books,toys,jewelery,personal computers)
        - in: query
          name: search
          schema:
            type: string
            example:
          description: search term (Example - nodejs)
      responses:
        '200': # status code
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Found products
                  data:
                    type: object
                    properties:
                      totalDocs:
                        type: integer
                        minimum: 0
                      totalPages:
                        type: integer
                      lastPage:
                        type: integer
                      count:
                        type: integer
                      currentPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      nextPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      products:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/ProductResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /products/top-5-cheap:
    get:
      summary: Returns 5 top cheapest and highly rated product
      tags:
        - Product
      description:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Found products
                  data:
                    type: object
                    properties:
                      totalDocs:
                        type: integer
                        minimum: 0
                      totalPages:
                        type: integer
                      lastPage:
                        type: integer
                      count:
                        type: integer
                      currentPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      nextPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      products:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/ProductResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /products/{productId}:
    get:
      summary: Get product based on request id
      tags:
        - Product
      parameters:
        - in: path
          name: productId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6398540ee6e5ae8c37c333ac
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found product by ID ...
                  data:
                    type: object
                    properties:
                      product:
                        type: object
                        '$ref': '#/components/schemas/ProductResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /products/reviews:
    put:
      security:
        - Authorization: []
      summary: Add/Update review and comment to product
      tags:
        - Product
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  minimum: 1
                  example: '63a44be6f4cf592dedf5c70a'
                comment:
                  type: string
                  example: great and modern product
                rating:
                  type: number
                  example: 4.9
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully add review to product .....
                  data:
                    type: object
                    properties:
                      product:
                        type: object
                        '$ref': '#/components/schemas/ProductResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /products/reviews/{productId}:
    get:
      summary: Get list of reviews and comments for single product
      tags:
        - Product
      parameters:
        - in: path
          name: productId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6398540ee6e5ae8c37c333ac
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found reviews for product by ID ...
                  data:
                    type: object
                    properties:
                      reviews:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/ProductResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    delete:
      security:
        - Authorization: []
      summary: Delete review and comment based on request id
      tags:
        - Product
      parameters:
        - in: path
          name: productId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6398540ee6e5ae8c37c333ac
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted review from product by ID ...
                  data:
                    type: object
                    properties:
                      product:
                        type: object
                        '$ref': '#/components/schemas/ProductResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  # Cart

  /cart:
    get:
      summary: Returns user cart
      security:
        - Authorization: []
      tags:
        - Cart
      description:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found cart
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/CartResponse'
                      userId:
                        type: string

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    post:
      summary: Add product to user cart
      security:
        - Authorization: []
      tags:
        - Cart
      parameters:
        - in: query
          name: decrease
          schema:
            type: boolean
            default: false
      description:
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  minimum: 1
                  example: 63a1a5929ef261c4347fadc9
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: 'Successfully added product to cart: 63a1a5929ef261c4347fadc9'
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/AuthCartResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /cart/delete-item:
    post:
      summary: Delete item from cart
      security:
        - Authorization: []
      tags:
        - Cart
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  minimum: 1
                  example: 63a1a5929ef261c4347fadc9
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: '`Successfully Removed items : 63a1a5929ef261c4347fadc9 from Cart '
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/AuthCartResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /cart/clear-cart:
    delete:
      security:
        - Authorization: []
      summary: Clear user cart
      tags:
        - Cart
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully Cleared cart
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  # Orders

  /orders:
    get:
      summary: Returns a list of orders
      security:
        - Authorization: []
      tags:
        - Order
      description:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Found all your orders
                  data:
                    type: object
                    properties:
                      orders:
                        type: object
                        '$ref': '#/components/schemas/OrderResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    post:
      summary: Process user order
      security:
        - Authorization: []
      tags:
        - Order
      description:
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderItems:
                  items:
                    type: object
                    properties:
                      product:
                        type: string
                        example: 63aa95109e8eb8a0f45c412e
                      quantity:
                        type: number
                        example: 10
                paymentInfo:
                  type: string
                  minimum: 1
                  example: strip
                orderStatus:
                  type: string
                  enum:
                    - 'pending'
                    - 'delivered'
                    - 'waiting payment'
                    - 'waiting pickup'
                    - 'shipped'
                    - 'cancelled'
                    - 'completed'
                  default: 'pending'
                textAmount:
                  type: number
                  minimum: 1
                  example: 10
                shippingAmount:
                  type: number
                  minimum: 1
                  example: 40
                totalAmount:
                  type: number
                  minimum: 1
                  example: 100
                shippingInfo:
                  type: object
                  properties:
                    address:
                      type: string
                      example: 'Tiban center 12'
                    street:
                      type: string
                      example: '23 frey terminal'
                    city:
                      type: string
                      example: 'Batam'
                    country:
                      type: string
                      example: 'Indonesia'
                    zipCode:
                      type: string
                      example: 'Cd544'
                    status:
                      type: string
                      example: 'Tiban center 12'
                    phoneNo:
                      type: string
                      example: '+6285366666'

      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Thank you, your orders will be shipped in 2-3 business days
                  data:
                    type: object
                    properties:
                      order:
                        type: object
                        '$ref': '#/components/schemas/OrderResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /orders/invoices/{orderId}:
    get:
      summary: Generate user order invoice as pdf and download
      security:
        - Authorization: []
      tags:
        - Order
      parameters:
        - in: path
          name: orderId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6398540ee6e5ae8c37c333ac
      description:
      responses:
        '200':
          description: OK
          content:
            application/pdf:
              schema:
                type: string
                format: binary

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /orders/{orderId}:
    get:
      summary: Get single order based on request id
      security:
        - Authorization: []
      tags:
        - Order
      description:
      parameters:
        - in: path
          name: orderId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6398540ee6e5ae8c37c333ac
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found order by ID ....
                  data:
                    type: object
                    properties:
                      order:
                        type: object
                        '$ref': '#/components/schemas/OrderResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    delete:
      summary: Delete single order based on request id
      security:
        - Authorization: []
      tags:
        - Order
      parameters:
        - in: path
          name: orderId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6398540ee6e5ae8c37c333ac
      description:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted order by ID ...
                  data:
                    type: object
                    nullable: true
                    example: null

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /orders/clear-orders:
    delete:
      summary: Clear all the user order list
      security:
        - Authorization: []
      tags:
        - Order
      description:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Cleared all orders
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          type: string
                        maxItems: 0

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /payment/create-stripe-checkout-session:
    post:
      summary: Create a stripe checkout session and return redirect url to stripe page for completing payment process
      tags:
        - Payment
      security:
        - Authorization: []
      description:
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderItems:
                  items:
                    type: object
                    properties:
                      product:
                        type: object
                        properties:
                          name:
                            type: string
                            default: 'Clean code book in js'
                          _id:
                            type: string
                            default: '63b01991f5f5c95f072fea53'
                          price:
                            type: number
                            default: 2
                          description:
                            type: string
                            default: 'Checkout clean code book in js'
                          productImage:
                            type: string
                            default: '/static/uploads/products/productImage-b2f8042f-58ef-479a-a817-b5636e5eaf5b.png'
                      quantity:
                        type: number
                        example: 2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Payment Success
                  data:
                    type: object
                    properties:
                      url:
                        type: string

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /payment/stripKey:
    get:
      summary: Returns a stripe public key for Front-End to continue payment process
      tags:
        - Payment
      security:
        - Authorization: []
      description:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    properties:
                      stripeKey:
                        type: string

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'
  /payment/captureStripePayment:
    post:
      summary: Api to capture stripe payment (TODO)
      tags:
        - Payment
      security:
        - Authorization: []
      description:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  example: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Payment Success
                  data:
                    type: object
                    properties:
                      client_secret:
                        type: string

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  # Post

  /feed/posts:
    get:
      summary: Returns a list of posts (can search, sort by each filed, filter by each filed)
      tags:
        - Post
      description:
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            example: 10
          description: The numbers of items to return (the default value is 20)
        - in: query
          name: page
          schema:
            type: integer
            # minimum: 1
            # example: 1
          description: Pagination page number (the default value is 1)
        - in: query
          name: sort
          schema:
            type: string
            example:
          description: Sort query
        - in: query
          name: category
          schema:
            type: string
            example:
          description: Filter by Category name (Example - coding,sports,social,blockchain,devapp,nodejs)
        - in: query
          name: search
          schema:
            type: string
            example:
          description: search term (Example - nodejs)
      responses:
        '200': # status code
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Found posts
                  data:
                    type: object
                    properties:
                      totalDocs:
                        type: integer
                        minimum: 0
                      totalPages:
                        type: integer
                      lastPage:
                        type: integer
                      count:
                        type: integer
                      currentPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      nextPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      posts:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/PostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    post:
      security:
        - Authorization: []
      summary: Add a new post
      tags:
        - Post
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              '$ref': '#/components/schemas/PostRequest'
            encoding:
              postImage:
                contentType: application/octet-stream

      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Successfully added new post
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /feed/posts/timeline:
    get:
      summary: Returns a list of timeline posts for auth user
      tags:
        - Post
      security:
        - Authorization: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Found posts
                  data:
                    type: object
                    properties:
                      posts:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/PostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /feed/posts/{postId}:
    get:
      summary: Get post based on request id
      tags:
        - Post
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63baa65d8d3ae49ad7361509
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    patch:
      security:
        - Authorization: []
      summary: Update post based on request id
      tags:
        - Post
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bae1dbc7c5b2f65f3cbd97
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              '$ref': '#/components/schemas/PostRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully update post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    delete:
      security:
        - Authorization: []
      summary: Delete post based on request id
      tags:
        - Post
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bae1dbc7c5b2f65f3cbd97
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted post by ID ...
                  data:
                    type: object
                    nullable: true
                    example: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /feed/posts/{postId}/like:
    put:
      security:
        - Authorization: []
      summary: Like or unlike post based on request id
      tags:
        - Post
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bae1dbc7c5b2f65f3cbd97
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully like/un-like post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /feed/posts/user-posts:
    get:
      summary: Returns a list of posts for given user
      tags:
        - Post
      security:
        - Authorization: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found all posts for user by ID ...
                  data:
                    type: object
                    properties:
                      posts:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/PostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    delete:
      security:
        - Authorization: []
      summary: Delete all posts for given user
      tags:
        - Post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted post by ID ...
                  data:
                    type: object
                    nullable: true
                    example: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /feed/posts/comment:
    put:
      security:
        - Authorization: []
      summary: Add comment to post
      tags:
        - Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/addPostCommentRequest'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully update comment  by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'

    patch:
      security:
        - Authorization: []
      summary: Update comment
      tags:
        - Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/updatePostCommentRequest'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully add comment to post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    delete:
      security:
        - Authorization: []
      summary: Delete one comment based on request id
      tags:
        - Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/DeletePostCommentRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully delete comment by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /feed/posts/comment/{postId}:
    get:
      summary: Get all comments in the given post
      tags:
        - Post
      security:
        - Authorization: []
      description:
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6394b75d22f4732bfa7ca6ef
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found all comments for post by ID ...
                  data:
                    type: object
                    properties:
                      comments:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/PostCommentResponse'

    delete:
      security:
        - Authorization: []
      summary: Delete all comments in the given post
      tags:
        - Post
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bae1dbc7c5b2f65f3cbd97
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted all comments in post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /feed/posts/user-comment/{postId}:
    get:
      summary: Get all comments for the current login user in the given post
      tags:
        - Post
      security:
        - Authorization: []
      description:
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6394b75d22f4732bfa7ca6ef
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found all your comment in post by ID ...
                  data:
                    type: object
                    properties:
                      comments:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/PostCommentResponse'

    delete:
      security:
        - Authorization: []
      summary: Delete all comments for the current login user or the given user in the given post
      tags:
        - Post
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bae1dbc7c5b2f65f3cbd97
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: 63bae1dbc7c5b2f65f3cbd97
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully delete all user comments in post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /feed/posts/comment/{postId}/{commentId}:
    get:
      summary: Get one comment based on request id
      tags:
        - Post
      security:
        - Authorization: []
      description:
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6394b75d22f4732bfa7ca6ef
        - in: path
          name: commentId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6394b75d22f4732bfa7ca6ef
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found comment by ID ...
                  data:
                    type: object
                    properties:
                      comment:
                        type: object
                        '$ref': '#/components/schemas/PostCommentResponse'

  # Auth

  /auth/signup:
    post:
      summary: Register new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Auth Signup is success. An Email with Verification link has been sent to your account ${email} Please Verify Your Email first or use the email verification lik which is been send with the response body to verfiy your email
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          accessToken:
                            type: string
                          refreshToken:
                            type: 'string'
                          emailVerificationLinkToken:
                            type: string

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/login:
    post:
      summary: Authenticate a user
      tags:
        - Auth
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: testverstion@gmail.com
                password:
                  type: string
                  example: 12345test
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Auth logged in successful
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                      user:
                        $ref: '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/me:
    get:
      security:
        - Authorization: []
      summary: Return user profile
      tags:
        - Auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Successfully found user profile 🍀'
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/logout:
    post:
      summary: Un authenticate a user
      tags:
        - Auth
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MzU4YmU5YWNhMzBiOThlMGU2OGQwM2QiLCJpYXQiOjE2NzAxNTUxODEsImV4cCI6MTcwMTcxMjc4MSwiYXVkIjoiNjM1OGJlOWFjYTMwYjk4ZTBlNjhkMDNkIiwiaXNzIjoidGVzdG5kb2Vqcy5jb20ifQ.CIAighkM5LkNMRZ4pnzhZ-sjXurZA8Sd1qKq4VYuZXw

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Auth logout success
                  data:
                    type: object
                    nullable: true
                    example: null

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/update/{userId}:
    patch:
      security:
        - Authorization: []
      summary: Edit user based on request id
      tags:
        - Auth
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6358c2odca30b98e0e68d063
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully updated post by ID ...
                  data:
                    type: object
                    '$ref': '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/remove/{userId}:
    delete:
      security:
        - Authorization: []
      summary: Delete user based on request id
      tags:
        - Auth
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6358c2odca30b98e0e68d063
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted user by ID ...
                  data:
                    type: object
                    nullable: true
                    example: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/verify-email/{userId}/{token}:
    get:
      summary: Verify auth email
      tags:
        - Auth
      description:
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6394b75d22f4732bfa7ca6ef
        - in: path
          name: token
          required: true
          description: Unique token
          schema:
            type: string
            minimum: 1
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2Mzk0Yjc1ZDIyZjQ3MzJiZmE3Y2E2ZWYiLCJpYXQiOjE2NzA2OTI5NzgsImV4cCI6MTcwMjI1MDU3OCwiYXVkIjoiNjM5NGI3NWQyMmY0NzMyYmZhN2NhNmVmIiwiaXNzIjoidGVzdG5kb2Vqcy5jb20ifQ.lb-IL1iEI8yIth62i8pwj7N8C-Ce5QVfsKNBIb9Pa7k
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Your account has been successfully verified . Please Login
                  data:
                    type: object
                    nullable: true
                    example: null

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/refresh-token:
    post:
      summary: Get new access and refresh token
      tags:
        - Auth
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  minimum: 1
                  example: 6358c27dca30b98e0e68d063
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Auth logged in successful.
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          accessToken:
                            type: string
                          refreshToken:
                            type: 'string'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/forget-password:
    post:
      summary: Allow user to get new password (send rest password token to user email)
      tags:
        - Auth
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  minimum: 1
                  example: 6358c27dca30b98e0e68d063
                email:
                  type: string
                  example: testverstion@gmail.com
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Auth logged in successful.
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          accessToken:
                            type: string
                          refreshToken:
                            type: 'string'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/reset-password/{userId}/{token}:
    post:
      summary: Endpoint to rest user password using magic link which is been sent to their email
      tags:
        - Auth
      description:
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6358c27dca30b98e0e68d063
        - in: path
          name: token
          required: true
          description: Unique token
          schema:
            type: string
            minimum: 1
            example: 6358c27dca30b98e0e68d063
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  minimum: 1
                  example: 6358c27dca30
                confirmPassword:
                  type: string
                  example: 6358c27dca30
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Your password has been Password Reset Successfully updated please login
                  data:
                    type: object
                    properties:
                      User:
                        type: object
                        properties:
                          loginLink:
                            type: string

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  # User

  /users/{userId}/follow:
    put:
      security:
        - Authorization: []
      summary: Flow given user based on request id
      tags:
        - User
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 639593f33994948bfb0756d0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User has been followed successfully
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        '$ref': '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /users/{userId}/un-follow:
    put:
      security:
        - Authorization: []
      summary: Un flow given user based on request id
      tags:
        - User
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 639593f33994948bfb0756d0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User has been un followed successfully
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        '$ref': '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  # Admin

  /admin/users/add:
    post:
      security:
        - Authorization: []
      summary: Admin add new user
      tags:
        - Admin
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdminAddUserRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Auth Signup is success. An Email with Verification link has been sent to your account ${email} Please Verify Your Email first or use the email verification lik which is been send with the response body to verfiy your email
                  data:
                    type: object
                    '$ref': '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'
  /admin/users:
    get:
      security:
        - Authorization: []
      summary: Returns a list of users whose role is (user, admin, manger, moderator)
      tags:
        - Admin
      description: admin only api
      parameters:
        - in: header
          name: authToken
          description: Admin authorization access token
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            example: 20
          description: The numbers of items to return (the default value is 20)
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            example: 1
          description: Pagination page number (the default value is 1)
        - in: query
          name: filterBy
          schema:
            type: string
            example:
          description: Filter type (Example - role)
        - in: query
          name: role
          schema:
            type: string
            example:
          description: Role name (Example - user')
        - in: query
          name: search
          schema:
            type: string
            example:
          description: search term (Example - Saddam)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/AdminAuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/users/{userId}:
    get:
      security:
        - Authorization: []
      summary: Get user info based on request id
      tags:
        - Admin
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6358c2odca30b98e0e68d063
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully updated post by ID ...
                  data:
                    type: object
                    '$ref': '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/users/update/{userId}:
    put:
      security:
        - Authorization: []
      summary: Edit user based on request id
      tags:
        - Admin
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 639593f33994948bfb0756d0
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdminAuthRequest'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully updated post by ID ...
                  data:
                    type: object
                    '$ref': '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/users/remove/{userId}:
    delete:
      security:
        - Authorization: []
      summary: Delete user based on request id
      tags:
        - Admin
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6358c2odca30b98e0e68d063
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted user by ID ...
                  data:
                    type: object
                    nullable: true
                    example: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/products:
    get:
      security:
        - Authorization: []
      summary: Returns a list of products with info of owner who added
      tags:
        - Admin
      description:
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            example: 20
          description: The numbers of items to return (the default value is 20)
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            example: 1
          description: Pagination page number (the default value is 1)
        - in: query
          name: filterBy
          schema:
            type: string
            example:
          description: Filter type (Example - category)
        - in: query
          name: category
          schema:
            type: string
            example:
          description: Category name (Example - books)
        - in: query
          name: search
          schema:
            type: string
            example:
          description: search term (Example - nodejs)
      responses:
        '200': # status code
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Found products
                  data:
                    type: object
                    properties:
                      totalDocs:
                        type: integer
                        minimum: 0
                      totalPages:
                        type: integer
                      lastPage:
                        type: integer
                      count:
                        type: integer
                      currentPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      nextPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      products:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/AdminProductResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/products/{productId}:
    get:
      security:
        - Authorization: []
      summary: Get product based on request id
      tags:
        - Admin
      parameters:
        - in: path
          name: productId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6398540ee6e5ae8c37c333ac
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found product by ID ...
                  data:
                    type: object
                    properties:
                      product:
                        type: object
                        '$ref': '#/components/schemas/AdminProductResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/products/add:
    post:
      security:
        - Authorization: []
      summary: Admin add a new product
      tags:
        - Admin
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Successfully created new product
                  data:
                    type: object
                    properties:
                      product:
                        type: object
                        '$ref': '#/components/schemas/AdminProductResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/products/update/{productId}:
    put:
      security:
        - Authorization: []
      summary: Admin update product based on request id
      tags:
        - Admin
      parameters:
        - in: path
          name: productId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6398540ee6e5ae8c37c333ac
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Auth Signup is success. An Email with Verification link has been sent to your account ${email} Please Verify Your Email first or use the email verification lik which is been send with the response body to verfiy your email
                  data:
                    type: object
                    properties:
                      product:
                        type: object
                        '$ref': '#/components/schemas/AdminProductResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/products/delete/{productId}:
    delete:
      security:
        - Authorization: []
      summary: Delete product based on request id
      tags:
        - Admin
      parameters:
        - in: path
          name: productId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6398540ee6e5ae8c37c333ac
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted product by ID ...
                  data:
                    type: object
                    nullable: true
                    example: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/products/clear-all-products:
    delete:
      summary: Admin delete all the products in db
      security:
        - Authorization: []
      tags:
        - Admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful cleared all products
                  data:
                    type: object
                    nullable: true
                    example: null

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/orders:
    get:
      summary: Returns a list of orders for all users
      security:
        - Authorization: []
      tags:
        - Admin
      description:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Found all orders
                  data:
                    type: object
                    properties:
                      orders:
                        type: object
                        '$ref': '#/components/schemas/AdminOrderResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/orders/get-user-order/{userId}:
    get:
      summary: Returns a list of all the orders for  given user
      security:
        - Authorization: []
      tags:
        - Admin
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6395894b31dbc5441a53ae6e
      description:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found  all order for user by ID ...
                  data:
                    type: object
                    properties:
                      orders:
                        type: object
                        '$ref': '#/components/schemas/AdminOrderResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/orders/{orderId}:
    get:
      summary: Get single order based on request id
      security:
        - Authorization: []
      tags:
        - Admin
      description:
      parameters:
        - in: path
          name: orderId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6398540ee6e5ae8c37c333ac
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found order by ID ....
                  data:
                    type: object
                    properties:
                      order:
                        type: object
                        '$ref': '#/components/schemas/AdminOrderResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    patch:
      summary: Update order status
      security:
        - Authorization: []
      tags:
        - Admin
      parameters:
        - in: path
          name: orderId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63aea7d0cfd10d1caa4cdfda
      description:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderStatus:
                  type: string
                  enum:
                    - 'pending'
                    - 'delivered'
                    - 'waiting payment'
                    - 'waiting pickup'
                    - 'shipped'
                    - 'cancelled'
                    - 'completed'
                  default: 'completed'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully update order by ID ...
                  data:
                    type: object
                    properties:
                      order:
                        type: object
                        '$ref': '#/components/schemas/AdminOrderResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    delete:
      summary: Delete single order based on request id
      security:
        - Authorization: []
      tags:
        - Admin
      parameters:
        - in: path
          name: orderId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6398540ee6e5ae8c37c333ac
      description:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted order by ID ...
                  data:
                    type: object
                    nullable: true
                    example: null

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/orders/clear-user-order/{userId}:
    delete:
      summary: Admin delete all the order for given user id
      security:
        - Authorization: []
      tags:
        - Admin
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6395894b31dbc5441a53ae6e
      description:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted all orders for user by ID ...
                  data:
                    type: object
                    nullable: true
                    example: null

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/orders/clear-all-orders:
    delete:
      summary: Admin delete all the orders in db
      security:
        - Authorization: []
      tags:
        - Admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Cleared all orders
                  data:
                    type: object
                    nullable: true
                    example: null

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/feed/posts:
    get:
      summary: Returns a list of posts with full info of their creator
      tags:
        - Admin
      security:
        - Authorization: []
      description:
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            example: 10
          description: The numbers of items to return (the default value is 10)
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            example: 1
          description: Pagination page number (the default value is 1)
        - in: query
          name: filterBy
          schema:
            type: string
            example:
          description: Filter type (Example - category)
        - in: query
          name: category
          schema:
            type: string
            example:
          description: Category name (Example - coding)
        - in: query
          name: search
          schema:
            type: string
            example:
          description: search term (Example - nodejs)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Found posts
                  data:
                    type: object
                    properties:
                      totalDocs:
                        type: integer
                        minimum: 0
                      totalPages:
                        type: integer
                      lastPage:
                        type: integer
                      count:
                        type: integer
                      currentPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      nextPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      posts:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/AdminPostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    post:
      security:
        - Authorization: []
      summary: Admin add a new post
      tags:
        - Admin
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              '$ref': '#/components/schemas/PostRequest'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Successfully added new post
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/AdminPostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/feed/posts/{postId}:
    get:
      summary: Return post based on request id
      tags:
        - Admin
      security:
        - Authorization: []
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63baa65d8d3ae49ad7361509
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/AdminPostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    patch:
      security:
        - Authorization: []
      summary: Admin update post based on request id
      tags:
        - Admin
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bb7445b2380d639ceed719
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              '$ref': '#/components/schemas/PostRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully update post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/AdminPostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    delete:
      security:
        - Authorization: []
      summary: Admin delete single post based on request id
      tags:
        - Admin
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bae1dbc7c5b2f65f3cbd97
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted post by ID ...
                  data:
                    type: object
                    nullable: true
                    example: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/feed/posts/user/{userId}:
    delete:
      security:
        - Authorization: []
      summary: Admin delete all posts for given user
      tags:
        - Admin
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bae1dbc7c5b2f65f3cbd97
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted all posts for user by ID ...
                  data:
                    type: object
                    nullable: true
                    example: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/feed/posts/clear-all-posts:
    delete:
      summary: Admin delete all the posts in db
      security:
        - Authorization: []
      tags:
        - Admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Cleared all posts
                  data:
                    type: object
                    nullable: true
                    example: null

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/feed/posts/comment/{postId}:
    delete:
      security:
        - Authorization: []
      summary: Admin delete all comments in the given post
      tags:
        - Admin
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bae1dbc7c5b2f65f3cbd97
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted all comments in post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/AdminPostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/feed/posts/comment:
    delete:
      security:
        - Authorization: []
      summary: Admin delete one comment based on request id
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/DeletePostCommentRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully delete comment by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/AdminPostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  # Manager

  /manager/users:
    get:
      security:
        - Authorization: []
      summary: Returns a list of users whose role is user
      tags:
        - Manager
      description: admin only api
      parameters:
        - in: header
          name: authToken
          description: Authorization access token
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/AdminAuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /manager/orders:
    get:
      summary: Returns a list of orders for customer whose role is user
      security:
        - Authorization: []
      tags:
        - Manager
      description:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Found all orders
                  data:
                    type: object
                    properties:
                      orders:
                        type: object
                        '$ref': '#/components/schemas/AdminOrderResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /manager/feed/posts:
    get:
      summary: Returns a list of posts which created by customer whose role is a user
      tags:
        - Manager
      security:
        - Authorization: []
      description:
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            example: 10
          description: The numbers of items to return (the default value is 10)
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            example: 1
          description: Pagination page number (the default value is 1)
        - in: query
          name: filterBy
          schema:
            type: string
            example:
          description: Filter type (Example - category)
        - in: query
          name: category
          schema:
            type: string
            example:
          description: Category name (Example - coding)
        - in: query
          name: search
          schema:
            type: string
            example:
          description: search term (Example - nodejs)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Found posts
                  data:
                    type: object
                    properties:
                      totalDocs:
                        type: integer
                        minimum: 0
                      totalPages:
                        type: integer
                      lastPage:
                        type: integer
                      count:
                        type: integer
                      currentPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      nextPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      posts:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/AdminPostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  # Moderator

  /moderator/users:
    get:
      security:
        - Authorization: []
      summary: Returns a list of users whose role is user or client
      tags:
        - Moderator
      description: moderator only api
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/AdminAuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  # Supervisor

  /supervisor:
    get:
      security:
        - Authorization: []
      summary: supervisor role api
      tags:
        - Supervisor api - (todo)
      description: supervisor only api
      parameters:
        - in: header
          name: authToken
          description: Authorization access token
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    nullable: true
                    example: null

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  #  filestream
  /pdf-test:
    get:
      summary: Api for testing pdf document serve (Returns PDF file)
      tags:
        - PDF - filestream
      responses:
        '200':
          description: OK
          content:
            application/pdf:
              schema:
                type: string
                format: binary

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'
  # Deprecated APIs

  /test/healthChecker:
    get:
      deprecated: true
      summary: This endpoint is been deprecated
      tags:
        - Deprecated APIs
      responses:
        '410':
          description: Deprecated
          content:
            application/json:
              schema:
                schema:
                '$ref': '#/components/schemas/DeprecatedApiResponse'

  /checkout:
    get:
      deprecated: true
      summary: This endpoint is been deprecated
      tags:
        - Deprecated APIs
      responses:
        '410':
          description: Deprecated
          content:
            application/json:
              schema:
                schema:
                '$ref': '#/components/schemas/DeprecatedApiResponse'

  /auth/profile:
    get:
      deprecated: true
      summary: This endpoint is been deprecated
      tags:
        - Deprecated APIs
      responses:
        '410':
          description: Deprecated
          content:
            application/json:
              schema:
                schema:
                '$ref': '#/components/schemas/DeprecatedApiResponse'

  /admin/posts/{postId}:
    get:
      deprecated: true
      summary: This endpoint is been deprecated
      tags:
        - Deprecated APIs
      responses:
        '410':
          description: Deprecated
          content:
            application/json:
              schema:
                schema:
                '$ref': '#/components/schemas/DeprecatedApiResponse'

    patch:
      security:
        - Authorization: []
      summary: This endpoint is been deprecated
      tags:
        - Deprecated APIs
      deprecated: true
      responses:
        '410':
          description: Deprecated
          content:
            application/json:
              schema:
                schema:
                '$ref': '#/components/schemas/DeprecatedApiResponse'

    delete:
      security:
        - Authorization: []
      summary: Delete post based on request id
      tags:
        - Deprecated APIs
      deprecated: true
      responses:
        '410':
          description: Deprecated
          content:
            application/json:
              schema:
                schema:
                '$ref': '#/components/schemas/DeprecatedApiResponse'

  /moderator/users/band/{userId}:
    delete:
      deprecated: true
      summary: This endpoint is been deprecated
      tags:
        - Deprecated APIs
      responses:
        '410':
          description: Deprecated
          content:
            application/json:
              schema:
                schema:
                '$ref': '#/components/schemas/DeprecatedApiResponse'

components:
  schemas:
    HealthCheckResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description:
        error:
          type: boolean
          example: false
        status:
          type: integer
          example: 200
        message:
          type: string
          example: 'Welcome to Rest API - 👋🌎🌍🌏'
        data:
          type: object
          nullable: true
          example: null

    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
          required: true
        surname:
          type: string
        email:
          type: string
          required: true
        dateOfBirth:
          type: string
        gender:
          type: string
        profileImage:
          type: string
        mobileNumber:
          type: string
        companyName:
          type: string
        nationality:
          type: string
        address:
          type: string
        bio:
          type: string
        jobTitle:
          type: string

    AuthRequest:
      type: object
      description: Model containing post request info
      properties:
        name:
          type: string
          example: test
        surname:
          type: string
          example: test
        email:
          type: string
          example: testverstion@gmail.com
        password:
          type: string
          example: 12345test
        confirmPassword:
          type: string
          example: 12345test
        acceptTerms:
          type: boolean
          default: true
        dateOfBirth:
          type: string
          example: '09/10/1984'
        gender:
          type: string
          example: male
        mobileNumber:
          type: string
          example: '+62213147666'
        companyName:
          type: string
          example: Test company
        nationality:
          type: string
          example: Sudan
        favoriteAnimal:
          type: string
          example: cat
        address:
          type: string
          example: 12345test home Batam Indonesia
        bio:
          type: string
          example: 'Software Engineer experienced in developing full-stack JavaScript/Typescript application primarily with React/Next/Redux and Node/Express server design'
        jobTitle:
          type: string
          example: Software Engineering
        profileImage:
          type: string
          format: binary
          description: Image type /png/jpg/jpeg/webp

    AuthResponse:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
          required: true
        surname:
          type: string
        email:
          type: string
          required: true
        dateOfBirth:
          type: string
        gender:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        profileImage:
          type: string
        mobileNumber:
          type: string
        companyName:
          type: string
        nationality:
          type: string
        favoriteAnimal:
          type: string
        address:
          type: string
        bio:
          type: string
        jobTitle:
          type: string
        followings:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/FollowUserScheme'
        followers:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/FollowUserScheme'
        cart:
          type: object
          properties:
            items:
              type: array
              items:
                type: object
                '$ref': '#/components/schemas/AuthCartResponse'

    AdminAuthRequest:
      type: object
      description: Model containing admin auth request info
      properties:
        role:
          type: string
          enum:
            - 'user'
            - 'admin'
            - 'manger'
            - 'supervisor'
            - 'moderator'
            - 'guide'
            - 'client'
          default: 'user'
        status:
          type: string
          enum:
            - 'pending'
            - 'active'
          default: 'active'
        name:
          type: string
          example: test
        surname:
          type: string
          example: test
        email:
          type: string
          example: testverstion@gmail.com
        acceptTerms:
          type: boolean
          default: true
        dateOfBirth:
          type: string
          example: '09/10/1984'
        gender:
          type: string
          example: male
        mobileNumber:
          type: string
          example: '+62213147666'
        companyName:
          type: string
          example: Test company
        nationality:
          type: string
          example: Sudan
        favoriteAnimal:
          type: string
          example: cat
        address:
          type: string
          example: 12345test home Batam Indonesia
        bio:
          type: string
          example: 'Software Engineer experienced in developing full-stack JavaScript/Typescript application primarily with React/Next/Redux and Node/Express server design'
        jobTitle:
          type: string
          example: Software Engineering
        profileImage:
          type: string
          format: binary
          description: Image type /png/jpg/jpeg/webp

    AdminAddUserRequest:
      type: object
      description: Model containing admin auth request info
      properties:
        role:
          type: string
          enum:
            - 'user'
            - 'admin'
            - 'manger'
            - 'supervisor'
            - 'moderator'
            - 'guide'
            - 'client'
          default: 'user'
        status:
          type: string
          enum:
            - 'pending'
            - 'active'
          default: 'active'
        name:
          type: string
          example: test
        surname:
          type: string
          example: test
        email:
          type: string
          example: testverstion@gmail.com
        password:
          type: string
          example: 12345test
        confirmPassword:
          type: string
          example: 12345test
        acceptTerms:
          type: boolean
          default: true
        dateOfBirth:
          type: string
          example: '09/10/1984'
        gender:
          type: string
          example: male
        mobileNumber:
          type: string
          example: '+62213147666'
        companyName:
          type: string
          example: Test company
        nationality:
          type: string
          example: Sudan
        favoriteAnimal:
          type: string
          example: cat
        address:
          type: string
          example: 12345test home Batam Indonesia
        bio:
          type: string
          example: 'Software Engineer experienced in developing full-stack JavaScript/Typescript application primarily with React/Next/Redux and Node/Express server design'
        jobTitle:
          type: string
          example: Software Engineering
        profileImage:
          type: string
          format: binary
          description: Image type /png/jpg/jpeg/webp

    AdminAuthResponse:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
          required: true
        surname:
          type: string
        email:
          type: string
          required: true
        dateOfBirth:
          type: string
        gender:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        isVerified:
          type: string
        profileImage:
          type: string
        mobileNumber:
          type: string
        status:
          type: string
        role:
          type: string
        companyName:
          type: string
        acceptTerms:
          type: string
        nationality:
          type: string
        favoriteAnimal:
          type: string
        address:
          type: string
        bio:
          type: string
        jobTitle:
          type: string
        followings:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/FollowUserScheme'
        followers:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/FollowUserScheme'
        cart:
          type: object
          properties:
            items:
              type: array
              items:
                type: object
                '$ref': '#/components/schemas/AuthCartResponse'

    ServerErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
          description:
        error:
          type: boolean
          example: true
        status:
          type: integer
          example: 500
        message:
          type: string
          example: Internal Server Error (different message based on request)
        data:
          type: object
          nullable: true
          example: null

    BadRequestResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
          description:
        error:
          type: boolean
          example: true
        status:
          type: integer
          example: between 400 - 500
        message:
          type: string
          example: Bad request (different message based on request)
        data:
          type: object
          nullable: true
          example: null

    DeprecatedApiResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
          description:
        error:
          type: boolean
          example: true
        status:
          type: integer
          example: 410
        message:
          type: string
          example: Deprecated API
        data:
          type: object
          nullable: true
          example: null

    SignUpResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description:
        error:
          type: boolean
          example: false
        status:
          type: integer
          example: 200
        message:
          type: string
          example: Auth Signup is success. An Email with Verification link has been sent to your account ${email} Please Verify Your Email first or use the email verification lik which is been send with the response body to verfiy your email
        data:
          type: object
          properties:
            user:
              type: object
              properties:
                accessToken:
                  type: string
                refreshToken:
                  type: 'string'
                emailVerificationLinkToken:
                  type: string

    ProductRequest:
      type: object
      description: Model containing product request info
      properties:
        category:
          type: string
          enum:
            - "men's clothing"
            - "women's clothing"
            - "women's shoes"
            - "men's shoes"
            - 'toys'
            - 'football'
            - 'books'
            - 'personal computers'
            - 'jewelery'
            - 'electronics'
            - 'sports'
            - 'all products'
          default: 'books'
        name:
          type: string
          example: Clean Architecture
        description:
          type: string
          example: Clean Architecture TypeScript Express API Book
        brand:
          type: string
          example: Rest Api
        price:
          type: number
          example: 99
        stock:
          type: string
          example: 'in stock - order soon'
        productImages:
          type: array
          items:
            type: string
            format: binary
            description: Image type /png/jpg/jpeg/webp

    ProductResponse:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: string
        brand:
          type: string
        category:
          type: string
        productImage:
          type: string
        stock:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        ratings:
          type: number
        numberOfReviews:
          type: number
        reviews:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/ReviewsResponse'
        request:
          type: object
          '$ref': '#/components/schemas/ResponseAdditionalInfo'

    AdminProductResponse:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: string
        brand:
          type: string
        category:
          type: string
        productImage:
          type: string
        stock:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        ratings:
          type: number
        numberOfReviews:
          type: number
        reviews:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/AdminReviewsResponse'
        request:
          type: object
          '$ref': '#/components/schemas/ResponseAdditionalInfo'
        user:
          type: object
          '$ref': '#/components/schemas/AdminAuthResponse'

    AdminReviewsResponse:
      type: object
      properties:
        user:
          type: object
          '$ref': '#/components/schemas/AdminAuthResponse'
        name:
          type: string
        rating:
          type: number
        comment:
          type: string

    ReviewsResponse:
      type: object
      properties:
        user:
          type: string
        name:
          type: string
        rating:
          type: number
        comment:
          type: string

    ResponseAdditionalInfo:
      type: object
      properties:
        type:
          type: string
          example: 'GET'
        description:
          type: string
        url:
          type: string

    AuthCartResponse:
      type: object
      properties:
        product:
          type: object
          '$ref': '#/components/schemas/ProductResponse'
        quantity:
          type: number
        _id:
          type: string
    CartResponse:
      type: object
      properties:
        quantity:
          type: number
        product:
          type: object
          '$ref': '#/components/schemas/ProductResponse'

    OrderResponse:
      type: object
      properties:
        _id:
          type: string
        shippingInfo:
          type: object
          '$ref': '#/components/schemas/ShippingInfo'
        paymentInfo:
          type: string
        textAmount:
          type: number
        shippingAmount:
          type: number
        totalAmount:
          type: number
        orderStatus:
          type: string
        deliveredAt:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        user:
          type: object
          properties:
            email:
              type: string
            name:
              type: string
            surname:
              type: string
            phone:
              type: string
            address:
              type: string
            userId:
              type: object
              '$ref': '#/components/schemas/User'
        orderItems:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              quantity:
                type: number
              product:
                type: object
                '$ref': '#/components/schemas/ProductResponse'

    AdminOrderResponse:
      type: object
      properties:
        _id:
          type: string
        shippingInfo:
          type: object
          '$ref': '#/components/schemas/ShippingInfo'
        paymentInfo:
          type: string
        textAmount:
          type: number
        shippingAmount:
          type: number
        totalAmount:
          type: number
        orderStatus:
          type: string
        deliveredAt:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        user:
          type: object
          properties:
            email:
              type: string
            name:
              type: string
            surname:
              type: string
            phone:
              type: string
            address:
              type: string
            userId:
              type: object
              '$ref': '#/components/schemas/AdminAuthResponse'
        orderItems:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              quantity:
                type: number
              product:
                type: object
                '$ref': '#/components/schemas/AdminProductResponse'

    ShippingInfo:
      type: object
      properties:
        address:
          type: string
        zipCode:
          type: string
        street:
          type: string
        city:
          type: string
        phoneNo:
          type: string
        status:
          type: string
        country:
          type: string

    PostRequest:
      type: object
      description: Model containing post request info
      properties:
        category:
          type: string
          enum:
            - 'coding'
            - 'sports'
            - 'reactjs'
            - 'nextjs'
            - 'nodejs'
            - 'typescript'
            - 'devapp'
            - 'blockchain'
            - 'social'
          default: 'social'
        title:
          type: string
          example: Clean Architecture Review
        content:
          type: string
          example: Clean Architecture TypeScript Express API Book
        postImage:
          type: string
          format: base64
          description: Image type /png/jpg/jpeg/webp

    PostResponse:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        content:
          type: string
        postImage:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        likes:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/PostLikeResponse'
        comments:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/PostCommentResponse'
        author:
          type: object
          '$ref': '#/components/schemas/LikeAndCommentUser'
        request:
          type: object
          '$ref': '#/components/schemas/ResponseAdditionalInfo'

    AdminPostResponse:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        content:
          type: string
        postImage:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        likes:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/PostLikeResponse'
        comments:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/PostCommentResponse'
        author:
          type: object
          '$ref': '#/components/schemas/AdminAuthResponse'
        request:
          type: object
          '$ref': '#/components/schemas/ResponseAdditionalInfo'

    PostCommentResponse:
      type: object
      properties:
        comment:
          type: string
        user:
          type: object
          '$ref': '#/components/schemas/LikeAndCommentUser'
        request:
          type: object
          '$ref': '#/components/schemas/ResponseAdditionalInfo'

    PostLikeResponse:
      type: object
      properties:
        user:
          type: object
          '$ref': '#/components/schemas/LikeAndCommentUser'

    addPostCommentRequest:
      type: object
      properties:
        postId:
          type: object
          example: 63db0cb558191bf1d20542d4
        comment:
          type: object
          example: comment

    updatePostCommentRequest:
      type: object
      properties:
        postId:
          type: object
          example: 63db0cb558191bf1d20542d4
        commentId:
          type: object
          example: 63db0cb558191bf1d20542d4
        comment:
          type: object
          example: comment

    DeletePostCommentRequest:
      type: object
      properties:
        postId:
          type: object
          example: 63db0cb558191bf1d20542d4
        commentId:
          type: object
          example: 63db0cb558191bf1d20542d4

    LikeAndCommentUser:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        surname:
          type: string
        bio:
          type: string
        profileImage:
          type: string

    FollowUserScheme:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: string
        name:
          type: string
          required: true
        surname:
          type: string
        profileImage:
          type: string

  securitySchemes:
    Authorization:
      type: http
      scheme: 'bearer'
      bearerFormat: 'JWT'
      value: 'Bearer <JWT token here>'
